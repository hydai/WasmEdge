name: release

concurrency:
  group: release-${{ github.head_ref }}
  cancel-in-progress: true

on:
  push:
    tags:
      - "*"

jobs:
  create:
    name: Create Release
    runs-on: ubuntu-latest
    container:
      image: wasmedge/wasmedge:ubuntu-build-gcc
    outputs:
      version: ${{ steps.prep.outputs.version }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Get version
        id: prep
        run: |
          echo ::set-output name=version::$(git describe --tag)
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: WasmEdge ${{ steps.prep.outputs.version }}
          body_path: .CurrentChangelog.md
          draft: true
          prerelease: false
  build_and_upload_amd64_package:
    name: Build WasmEdge and upload WasmEdge on amd64 platform
    needs: create
    runs-on: ubuntu-latest
    container:
      image: wasmedge/wasmedge:ubuntu-build-gcc
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Build package
        run: |
          apt update
          apt install -y rpm ninja-build
          rm -rf build
          cmake -Bbuild -GNinja -DCMAKE_BUILD_TYPE=Release -DBUILD_PACKAGE="TGZ;DEB;RPM" .
          cmake --build build
          cmake --build build --target package
      - name: Upload WasmEdge amd64 deb package
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create.outputs.upload_url }}
          asset_path: build/wasmedge_${{ needs.create.outputs.version }}_amd64.deb
          asset_name: WasmEdge-${{ needs.create.outputs.version }}.deb
          asset_content_type: application/vnd.debian.binary-package
      - name: Upload wasmedge rpm package
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create.outputs.upload_url }}
          asset_path: build/WasmEdge-${{ needs.create.outputs.version }}-Linux.rpm
          asset_name: WasmEdge-${{ needs.create.outputs.version }}.rpm
          asset_content_type: application/x-rpm
      - name: Upload wasmedge tar.gz package
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create.outputs.upload_url }}
          asset_path: build/WasmEdge-${{ needs.create.outputs.version }}-Linux.tar.gz
          asset_name: WasmEdge-${{ needs.create.outputs.version }}.tar.gz
          asset_content_type: application/x-gzip
  build_and_upload_manylinux1_x86_64_package:
    name: Build WasmEdge on manylinux1_x86_64 platform and upload WasmEdge manylinux1 x86_64 package
    needs: create
    runs-on: ubuntu-latest
    container:
      image: wasmedge/wasmedge:manylinux1_x86_64
    steps:
      - name: Checkout code
        uses: actions/checkout@v1
      - name: Build manylinux1_x86_64 package
        run: |
          bash utils/docker/build-manylinux.sh
      - name: Upload manylinux1_x86_64 rpm package to artifact
        uses: actions/upload-artifact@v1
        with:
          name: WasmEdge-${{ needs.create.outputs.version }}-manylinux1_x86_64.rpm
          path: build/WasmEdge-${{ needs.create.outputs.version }}-Linux.rpm
      - name: Upload manylinux1_x86_64 tar.gz package to artifact
        uses: actions/upload-artifact@v1
        with:
          name: WasmEdge-${{ needs.create.outputs.version }}-manylinux1_x86_64.tar.gz
          path: build/WasmEdge-${{ needs.create.outputs.version }}-Linux.tar.gz
      - name: Upload manylinux1_x86_64 tar.xz package to artifact
        uses: actions/upload-artifact@v1
        with:
          name: WasmEdge-${{ needs.create.outputs.version }}-manylinux1_x86_64.tar.xz
          path: build/WasmEdge-${{ needs.create.outputs.version }}-Linux.tar.xz
  download_manylinux1_x86_64_artifact_and_upload_assets:
    name: Download WasmEdge artifacts on manylinux1_x86_64 platform and upload WasmEdge manylinux1 x86_64 package
    needs: [create, build_and_upload_manylinux1_x86_64_package]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Download manylinux1_x86_64 rpm artifact
        uses: actions/download-artifact@v1
        with:
          name: WasmEdge-${{ needs.create.outputs.version }}-manylinux1_x86_64.rpm
      - name: Verify the arifact
        run: |
          ls -alh .
          ls -alh WasmEdge-${{ needs.create.outputs.version }}-manylinux1_x86_64.rpm
      - name: Upload manylinux1_x86_64 rpm package
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create.outputs.upload_url }}
          asset_path: WasmEdge-${{ needs.create.outputs.version }}-manylinux1_x86_64.rpm
          asset_name: WasmEdge-${{ needs.create.outputs.version }}-manylinux1_x86_64.rpm
          asset_content_type: application/x-rpm
      - name: Download manylinux1_x86_64 tar.gz artifact
        uses: actions/download-artifact@v1
        with:
          name: WasmEdge-${{ needs.create.outputs.version }}-manylinux1_x86_64.tar.gz
      - name: Upload manylinux1_x86_64 tar.gz package
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create.outputs.upload_url }}
          asset_path: WasmEdge-${{ needs.create.outputs.version }}-manylinux1_x86_64.tar.gz
          asset_name: WasmEdge-${{ needs.create.outputs.version }}-manylinux1_x86_64.tar.gz
          asset_content_type: application/x-gzip
      - name: Download manylinux1_x86_64 tar.xz artifact
        uses: actions/download-artifact@v1
        with:
          name: WasmEdge-${{ needs.create.outputs.version }}-manylinux1_x86_64.tar.xz
      - name: Upload manylinux1_x86_64 tar.xz package
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create.outputs.upload_url }}
          asset_path: WasmEdge-${{ needs.create.outputs.version }}-manylinux1_x86_64.tar.xz
          asset_name: WasmEdge-${{ needs.create.outputs.version }}-manylinux1_x86_64.tar.xz
          asset_content_type: application/x-xz

  build_and_upload_manylinux2010_x86_64_package:
    name: Build WasmEdge on manylinux2010_x86_64 platform and upload WasmEdge manylinux2010 x86_64 package
    needs: create
    runs-on: ubuntu-latest
    container:
      image: wasmedge/wasmedge:manylinux2010_x86_64
    steps:
      - name: Checkout code
        uses: actions/checkout@v1
      - name: Build manylinux2010_x86_64 package
        run: |
          bash utils/docker/build-manylinux.sh
      - name: Upload manylinux2010_x86_64 rpm package to artifact
        uses: actions/upload-artifact@v1
        with:
          name: WasmEdge-${{ needs.create.outputs.version }}-manylinux2010_x86_64.rpm
          path: build/WasmEdge-${{ needs.create.outputs.version }}-Linux.rpm
      - name: Upload manylinux2010_x86_64 tar.gz package to artifact
        uses: actions/upload-artifact@v1
        with:
          name: WasmEdge-${{ needs.create.outputs.version }}-manylinux2010_x86_64.tar.gz
          path: build/WasmEdge-${{ needs.create.outputs.version }}-Linux.tar.gz
      - name: Upload manylinux2010_x86_64 tar.xz package to artifact
        uses: actions/upload-artifact@v1
        with:
          name: WasmEdge-${{ needs.create.outputs.version }}-manylinux2010_x86_64.tar.xz
          path: build/WasmEdge-${{ needs.create.outputs.version }}-Linux.tar.xz

  download_manylinux2010_x86_64_artifact_and_upload_assets:
    name: Download WasmEdge artifacts on manylinux2010_x86_64 platform and upload WasmEdge manylinux2010 x86_64 package
    needs: [create, build_and_upload_manylinux2010_x86_64_package]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Download manylinux2010_x86_64 rpm artifact
        uses: actions/download-artifact@v1
        with:
          name: WasmEdge-${{ needs.create.outputs.version }}-manylinux2010_x86_64.rpm
      - name: Verify the arifact
        run: |
          ls -alh .
          ls -alh WasmEdge-${{ needs.create.outputs.version }}-manylinux2010_x86_64.rpm
      - name: Upload manylinux2010_x86_64 rpm package
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create.outputs.upload_url }}
          asset_path: WasmEdge-${{ needs.create.outputs.version }}-manylinux2010_x86_64.rpm
          asset_name: WasmEdge-${{ needs.create.outputs.version }}-manylinux2010_x86_64.rpm
          asset_content_type: application/x-rpm
      - name: Download manylinux2010_x86_64 tar.gz artifact
        uses: actions/download-artifact@v1
        with:
          name: WasmEdge-${{ needs.create.outputs.version }}-manylinux2010_x86_64.tar.gz
      - name: Upload manylinux2010_x86_64 tar.gz package
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create.outputs.upload_url }}
          asset_path: WasmEdge-${{ needs.create.outputs.version }}-manylinux2010_x86_64.tar.gz
          asset_name: WasmEdge-${{ needs.create.outputs.version }}-manylinux2010_x86_64.tar.gz
          asset_content_type: application/x-gzip
      - name: Download manylinux2010_x86_64 tar.xz artifact
        uses: actions/download-artifact@v1
        with:
          name: WasmEdge-${{ needs.create.outputs.version }}-manylinux2010_x86_64.tar.xz
      - name: Upload manylinux2010_x86_64 tar.xz package
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create.outputs.upload_url }}
          asset_path: WasmEdge-${{ needs.create.outputs.version }}-manylinux2010_x86_64.tar.xz
          asset_name: WasmEdge-${{ needs.create.outputs.version }}-manylinux2010_x86_64.tar.xz
          asset_content_type: application/x-xz

  build_and_upload_manylinux2014_x86_64_package:
    name: Build WasmEdge on manylinux2014_x86_64 platform and upload WasmEdge manylinux2014 x86_64 package
    needs: create
    runs-on: ubuntu-latest
    container:
      image: wasmedge/wasmedge:manylinux2014_x86_64
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Build manylinux2014_x86_64 package
        run: |
          bash utils/docker/build-manylinux.sh
      - name: Upload manylinux2014_x86_64 rpm package
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create.outputs.upload_url }}
          asset_path: build/WasmEdge-${{ needs.create.outputs.version }}-Linux.rpm
          asset_name: WasmEdge-${{ needs.create.outputs.version }}-manylinux2014_x86_64.rpm
          asset_content_type: application/x-rpm
      - name: Upload manylinux2014_x86_64 tar.gz package
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create.outputs.upload_url }}
          asset_path: build/WasmEdge-${{ needs.create.outputs.version }}-Linux.tar.gz
          asset_name: WasmEdge-${{ needs.create.outputs.version }}-manylinux2014_x86_64.tar.gz
          asset_content_type: application/x-gzip
      - name: Upload manylinux2014_x86_64 tar.xz package
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create.outputs.upload_url }}
          asset_path: build/WasmEdge-${{ needs.create.outputs.version }}-Linux.tar.xz
          asset_name: WasmEdge-${{ needs.create.outputs.version }}-manylinux2014_x86_64.tar.xz
          asset_content_type: application/x-xz
